{
  "info": {
    "name": "Intelligent Email Filter API - Complete OAuth Flow",
    "description": "Complete API collection with OAuth flow for testing the email filter system",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    },
    {
      "key": "jwt_token",
      "value": ""
    }
  ],
  "item": [
    {
      "name": "1. Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Health check returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains status ok', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql('ok');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "2. Auth Status (Before Login)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/auth/status",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "status"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Auth status returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('User is not authenticated', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.authenticated).to.eql(false);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "3. Start OAuth Login",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"email\": \"test@ashoka.edu.in\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Login returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains authUrl', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.authUrl).to.exist;",
              "    console.log('OAuth URL:', jsonData.authUrl);",
              "    console.log('');",
              "    console.log('INSTRUCTIONS:');",
              "    console.log('1. Copy the OAuth URL from above');",
              "    console.log('2. Open it in your browser');",
              "    console.log('3. Complete Google OAuth flow');",
              "    console.log('4. Copy the authorization code from the callback');",
              "    console.log('5. Use it in the next request');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "4. OAuth Callback (Manual)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"code\": \"PASTE_AUTHORIZATION_CODE_HERE\",\n  \"state\": \"PASTE_STATE_FROM_LOGIN_RESPONSE\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/callback",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "callback"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Callback returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains JWT token', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.token).to.exist;",
              "    pm.expect(jsonData.user).to.exist;",
              "    ",
              "    // Store JWT token for subsequent requests",
              "    pm.collectionVariables.set('jwt_token', jsonData.token);",
              "    console.log('JWT Token stored for subsequent requests');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "5. Auth Status (After Login)",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/auth/status",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "status"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Auth status returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('User is authenticated', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.authenticated).to.eql(true);",
              "    pm.expect(jsonData.user).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "6. Get Emails (Should Work Now)",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/emails",
          "host": ["{{baseUrl}}"],
          "path": ["api", "emails"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Emails endpoint returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains emails array', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.emails).to.be.an('array');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "7. Get Filter Status",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/filter/status",
          "host": ["{{baseUrl}}"],
          "path": ["api", "filter", "status"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Filter status returns 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response contains status info', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.exist;",
              "    pm.expect(jsonData.emailStats).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "8. Get Indexing Status",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/indexing/status",
          "host": ["{{baseUrl}}"],
          "path": ["api", "indexing", "status"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Indexing status returns 200 or 404', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
              "});",
              "",
              "if (pm.response.code === 200) {",
              "    pm.test('Response contains sync state', function () {",
              "        const jsonData = pm.response.json();",
              "        pm.expect(jsonData.syncState).to.exist;",
              "    });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "9. Create Filter Expectations",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"title\": \"Work Related Emails\",\n  \"description\": \"Emails related to work projects, meetings, deadlines, and official university communications are important. Personal emails, newsletters, and promotional content are not important.\",\n  \"examples\": {\n    \"important\": [\n      \"Meeting invitations from colleagues\",\n      \"Project deadline reminders\",\n      \"Official university announcements\"\n    ],\n    \"notImportant\": [\n      \"Newsletter subscriptions\",\n      \"Promotional emails from companies\",\n      \"Social media notifications\"\n    ]\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/filter/expectations",
          "host": ["{{baseUrl}}"],
          "path": ["api", "filter", "expectations"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Expectations created successfully', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response contains expectations', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.expectations).to.exist;",
              "    pm.expect(jsonData.expectations.title).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "10. Trigger Full Indexing",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          },
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/indexing/full",
          "host": ["{{baseUrl}}"],
          "path": ["api", "indexing", "full"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Full indexing started', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response indicates indexing started', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include('started');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "11. Logout",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/auth/logout",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "logout"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Logout successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response confirms logout', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.message).to.include('Logged out');",
              "});",
              "",
              "// Clear the JWT token",
              "pm.collectionVariables.set('jwt_token', '');"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "12. Verify Logout (Should Fail)",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{jwt_token}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/emails",
          "host": ["{{baseUrl}}"],
          "path": ["api", "emails"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Access denied after logout', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Response indicates token required', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.include('token');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}